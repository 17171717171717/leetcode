維護min heap跟max heap 以及它們大小的關係
class MedianFinder {
public:
    priority_queue<int>max_pq;
    priority_queue<int, vector<int>, greater<int>>min_pq;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(max_pq.empty() || max_pq.top()>num){
            max_pq.push(num);
        }else min_pq.push(num);

        if(max_pq.size() > min_pq.size()+1){
            min_pq.push(max_pq.top());
            max_pq.pop();
        }else if(min_pq.size() > max_pq.size()+1){
            max_pq.push(min_pq.top());
            min_pq.pop();
        }
    }
    
    double findMedian() {
        if(max_pq.size() == min_pq.size()){
            if(max_pq.empty()){
                return 0;
            }else{
                return  ((double)(max_pq.top()+min_pq.top()) /2);
            }
        }
        else return max_pq.size()>min_pq.size() ?  max_pq.top() :  min_pq.top();
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
