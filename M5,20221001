//P(i, j) = P(i+1, j-1) && s[i] == s[j];
//        = s[i]==s[j] if j = i+1
class Solution {
public:
    string longestPalindrome(string s) {
        //P(i, j) = P(i+1, j-1) && s[i] == s[j];
        //        = s[i]==s[j] if j = i+1
        int n = s.size();
        bool dp[n][n];
        memset(dp,0,sizeof(dp));
        if(n==0 || n==1)return s;
        int left=0;
        int len=1;
        
        for(int i=0;i<n;i++){
            dp[i][i]=true;
        }
        
        for(int i=0;i<n;i++){
            for(int j=i-1;j>=0;j--){ // 04: 34 24(33) 14(23) 04(13)
          //  for(int j=0;j<i;j++){         04(13) 14(23) 24(33) 34
                dp[j][i] = (s[i]==s[j] &&(i-j<2||dp[j+1][i-1]));
                if(dp[j][i]&&len < i-j+1){
                    len = i-j+1;
                    left = j;
                }
            }
        }
        return s.substr(left,len);
    }
};
