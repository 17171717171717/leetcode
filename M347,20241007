class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> m;
        for(auto& num : nums){
            m[num]++;
        }

        // 最小堆，按照频率排序
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> min_heap;
        
        // 维护前k个最高频的元素
        for(auto it = m.begin(); it != m.end(); it++) {
            min_heap.push(make_pair(it->second, it->first));
            if(min_heap.size() > k) {
                min_heap.pop();  // 保证堆中只有k个元素
            }
        }

        // 将堆中的元素提取出来
        vector<int> ans;
        while (!min_heap.empty()) {
            ans.push_back(min_heap.top().second);
            min_heap.pop();
        }

        return ans;
    }
};
