//一層一層把最外面的剝掉，最後留下來的當root degree必為最小
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if(n==1)return {0};
        vector<int>ans;
        if(n==2){
            ans.push_back(edges[0][0]);
            ans.push_back(edges[0][1]);
            return ans;
        }
        vector<int>degree(n,0);
        vector<vector<int>>adj(n);
        queue<int>q;
        
        for(auto e:edges){
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
            degree[e[0]]++;
            degree[e[1]]++;
        }
        
        for(int i=0;i<n;i++){
            if(degree[i]==1){
                q.push(i);//leaf must exist
                degree[i]--;
            }
        }
        
       /* while(n>2){//sol size must 1 or 2 , otherwise if 3:must be a v's degree = 2
            int size = q.size();//leaf must exist
            n-=size;
            for(int i=0;i<size;i++){
                int t = q.front();
                q.pop();
                for(auto go : adj[t]){
                    adj[go].erase(t);
                    if(adj[go].size()==1)q.push(go);
                }
            }
        }*/

        while(n>2){
            int size = q.size();
            n-=size;
            //ans.clear();
            for(int i=0;i<size;i++){
                int cur = q.front();
                q.pop();
                //ans.push_back(cur);
                for(auto neighbor : adj[cur]){
                    degree[neighbor]--;
                    if(degree[neighbor]==1)q.push(neighbor);
                }
            }
           if(n==2){
                ans.push_back(q.front());
                q.pop();
                ans.push_back(q.front());
            }
           if(n==1){
                ans.push_back(q.front());                
            }
        }
        /*
        while(!q.empty()){
            ans.emplace_back(q.front());
            q.pop();
        }
        */
        return ans;
        
    }
};
