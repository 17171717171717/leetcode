
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int len = nums.size();
        int ans = 0;
        unordered_set<int>s(nums.begin(), nums.end()); // O(1) to search and insertion
        for(int val: nums){
            if(!s.count(val))continue;
            s.erase(val);
            int pre = val-1;
            int nxt = val+1;
            //100 -> 99, 101
            //99, 101 don't exist=> 101 - 99 - 1
            while(s.count(pre)){
                s.erase(pre);
                pre--;
            }
            while(s.count(nxt)){
                s.erase(nxt);
                nxt++;
            }
            ans = max(ans, nxt - pre - 1);
        }
        return ans;


        /*
        vector<int> ref = cntingsort(nums);
        int ans = 0,cnt = 1;
        for(int i = 1;i<nums.size();i++){
            if(nums[i] == nums[i-1] + 1){
                cnt ++;
                ans = max(cnt, ans);
            }
            else cnt = 1;
        }
        return ans;
        */
    }
    /*  counting sort isn't linear time
    vector<int>cntingsort(vector<int>& nums){
        int k = nums.size();
        int maxx = 0;

        for(int i = 0; i < k; i++){
            maxx = max(nums[i] , maxx);
        }
        vector<int>ref(maxx);
        vector<int>cnt(maxx);
        for(int i=0;i<maxx;i++){
            cnt[i] = 0;
        }
        for(int i=0;i<k;i++){
            cnt[nums[i]]++;
        }
        for(int i=1;i<maxx;i++){
            cnt[i] += cnt[i-1];
        }
        for(int i=0; i<k; i++){
            ref[cnt[nums[i]] - 1] = nums[i]; 
            cnt[nums[i]]--;
        }
        return ref;
    }
    */
};
