//easy bfs or dfs
class Solution {
public:
    int dx[4] = {1,-1,0,0};
    int dy[4] = {0,0,1,-1};
    
    void dfs(int x,int y,vector<vector<char>>& grid,vector<vector<bool>>&visited,int m,int n){
        if(x<0 || y<0 || x==m || y==n ||visited[x][y]||grid[x][y]=='0') return;
        visited[x][y]=1;
        dfs(x-1,y,grid,visited,m,n);
        dfs(x+1,y,grid,visited,m,n);
        dfs(x,y-1,grid,visited,m,n);
        dfs(x,y+1,grid,visited,m,n);
    }

    void bfs(int x,int y,vector<vector<char>>& grid,vector<vector<bool>>&visited,int m,int n){
        queue<pair<int,int>>q;
        q.push({x,y});
        visited[x][y]=1;
        while(!q.empty()){
            pair<int,int>cur = q.front();
            q.pop();
            //visited[cur.first][cur.second]=true;
            for(int i=0;i<4;i++){
                int tmpx = cur.first+dx[i];
                int tmpy = cur.second+dy[i];
                if(tmpx<0 || tmpy<0 || tmpx==m || tmpy==n ||visited[tmpx][tmpy]||grid[tmpx][tmpy]=='0') continue;
                q.push({tmpx,tmpy});
                visited[tmpx][tmpy]=1;
                }
            }
        }
    
    
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int cnt = 0;
        vector<vector<bool>>visited(m,vector<bool>(n,false));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                  //  bfs(i,j,grid,visited,m,n);
                    dfs(i,j,grid,visited,m,n);
                    cnt++;
                }
            }
        }
        return cnt;
    }
    

    
};
