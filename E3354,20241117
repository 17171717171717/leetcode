// class Solution {
// public:
//     bool go_right(vector<int> nums,int cur, int k){
//         if(cur >= k){
//             for(int i = 0; i < k; i++){
//                 if (nums[i] != 0){
//                     return false;
//                 }
//             }
//             return true;
//         }
//         if(cur < k-1){
//             while(nums[cur+1]>1 && nums[cur-1]> 1){
//                 nums[cur+1]--;
//                 nums[cur-1]--;
//             }        
//         }
//         if(nums[cur]==0){
//             cur = cur+1;
//             //cout << "go right cur = 0 , nums[cur] " << nums[cur] << " pos: " <<  cur << endl;
           
//             return go_right(nums,cur, k);
//         }
//         if(nums[cur] > 0){
//             nums[cur]--;
//             cur = cur-1;
//             //cout << "go right cur > 0 , nums[cur] " << nums[cur] << " pos: " <<  cur << endl;
           
//             return go_left(nums, cur, k);
//         }
//         return true;
//     }
    
//     bool go_left(vector<int> nums,int cur, int k){
//         if(cur < 0 ){
//             for(int i = 0; i < k; i++){
//                 if (nums[i] != 0){
//                     return false;
//                 }
//             }
//             return true;
//         }
//         if(cur > 0){
//             while(nums[cur+1]>1 && nums[cur-1]> 1){
//                 nums[cur+1]--;
//                 nums[cur-1]--;
//             }        
//         }
//         if(nums[cur]==0){
//             cur = cur-1;
//             //cout << "go left cur = 0 , nums[cur] " << nums[cur] << " pos: " <<  cur << endl;
//             return go_left(nums,cur, k);
//         }
//         if(nums[cur] > 0){
//             nums[cur]--;
//             cur = cur+1;
//             //cout << "go left cur > 0 ,nums[cur] " << nums[cur] << " pos: " <<  cur << endl;
//             return go_right(nums, cur, k);
//         }
//         return true;
//     }
    
//     int countValidSelections(vector<int>& nums) {
//         int n = nums.size();
//         if(n==1)return 2;
//         vector<int>st;
//         int ans = 0;
//         vector<int>rep;
//         for(int i = 0 ; i < n; i++){
//             if(nums[i] == 0){
//                 st.push_back(i);
//                 int k = 1;
//                 while((i+1 < n) && nums[i+1] == 0  ){
//                     i++;
//                     k++;
//                 }
//                 rep.push_back(k);
//             }
//         }
        
//         vector<int>tmp = nums;
//         for(int i = 0; i < st.size(); i++){
//             int cur = st[i];
//             //cout << "cur " << j << " nums[cur]: " << nums[j] << endl;
//             int lft= 0, rht = 0;

//             if(go_left(tmp,cur-1, n)){
//                 lft++;
//             }
//             tmp = nums;
//             cur = st[i];
//             if(go_right(tmp,cur+1, n)){
//                 rht++;
//             }
//             ans += (lft * rep[i]);
//             ans += (rht * rep[i]);
//         }

//         return ans;
//     }
// };

class Solution {
public:
 
    int countValidSelections(vector<int>& nums) {
        int ans=0;         
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                int leftsum=0; int rightsum=0;
                for(int j=0;j<i;j++)leftsum+=nums[j];                
                for(int j=i+1;j<nums.size();j++)rightsum+=nums[j];
                if(leftsum==rightsum)ans+=2;
                else if(abs(leftsum-rightsum)==1)ans++;
            }
        } 
        return ans;         
    }
};
