class Solution {
public:
    void reorderList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return;
        }

        // 步驟1：找到鏈表的中點
        ListNode* slow = head;
        ListNode* fast = head;

        while (fast->next != nullptr && fast->next->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // 步驟2：反轉後半部分鏈表
        ListNode* reversedSecondHalf = reverseList(slow->next);
        slow->next = nullptr;  // 斷開前半部分和後半部分的連接

        // 步驟3：合併兩個鏈表
        mergeLists(head, reversedSecondHalf);
    }

private:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        ListNode* next = nullptr;

        while (curr != nullptr) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }

    void mergeLists(ListNode* l1, ListNode* l2) {
        while (l1 != nullptr && l2 != nullptr) {
            ListNode* l1Next = l1->next;
            ListNode* l2Next = l2->next;

            l1->next = l2;
            l2->next = l1Next;

            l1 = l1Next;
            l2 = l2Next;
        }
    }
};
